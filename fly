#include <iostream>
#include <cmath>
#include <clocale>
#include <tuple>
#include <list>

using namespace std;

const double g=9.81;
const double dt=0.01;

double rt(double t,double v0){
    return v0*t - g*t*t/2;


}

double xt(double t,double vx){
    return vx*t-g*t*t/2;
}
double yt(double t,double vy){
    return vy*t - g*t*t/2;
}
double at(double t,double vy,double vx){
    double xt1 = xt(t,vx);
    double yt1 = yt(t,vy);
    double ax = 2*(xt1 - vx*t)/(t*t);
    double ay = 2*(yt1-vy*t)/(t*t);
    return sqrt(ax*ax+ay*ay);

}
double vt(double t,double v0,double sina){
    return sqrt(v0*v0-2*v0*sina*g*t+g*g*t*t);
}
int main()
{
    const double g=9.81;
    // ma = mg РЅРµРѕР±С…РѕРґРёРјРѕ РїСЂРё СЂР°СЃС‡С‘С‚Рµ РїРѕС‚РµРЅС†РёР°Р»СЊРЅРѕР№ СЌРЅРµСЂРіРёРё, Р° Р·Р°С‚РµРј РЅР°С…РѕР¶РґРµРЅРёРё СѓСЃРєРѕСЂРµРЅРёСЏ РїСЂРё РѕС‚СЃРєРѕРєРµ.
    double vx,vy,v0;
    cout << "Enter speed vx,vy";
    cin >> vx >> vy;
    v0 = sqrt(vx*vx +vy*vy); // speed
    double alpha; // vx = v0cosa
    alpha = acos(vx/v0);
    double cosa = (vx/v0);
    double sina = sqrt(1-cosa*cosa);

    double m;
    cout << "enter the mass";
    cin >> m;
    double percentE;
    cout << "enter percent of missing enegry";
    cin >> percentE;
    cout << "enter time";
    double tf;
    cin >> tf;

    double lmax=2*v0*v0*sina*cosa/g;
    double Ek = (m/2)*v0*v0;

    double t=dt;
    tuple <double,double> tupleav;
    list<tuple <double,double>> listav;
    tupleav = make_tuple(v0,0);
    listav.push_back(tupleav);

    double ht =-1,atf = -1,vtf = -1; //err

    while (xt(t,vx)>=lmax and xt(t,vx)<=lmax  ){
       double xt1 = xt(t,vx);
       double yt1 = yt(t,vy);
       double at1 = at(t,vy,vx);
       double vt1 = vt(t,v0,sina);
       tupleav = make_tuple(vt1,at1);
       listav.push_back(tupleav);
       if (t==tf or (t>=tf and t<=tf)) {ht = yt1;atf = at1;vtf= vt1;}
       cout << "t= " << t << " xt= " << xt1 << " yt1= " << yt1 << " at1= " << at1 << " vt1= " << vt1 << endl;
       t+=dt;
    }


    double newEk = (percentE/100) * Ek;
    while (newEk<=0){
        double v0new = sqrt(2*newEk/m);
        double vynew=v0new*cosa;
        double vxnew=v0new*sina;
        lmax=2*v0new*v0new*sina*cosa/g;
        while (xt(t,vxnew)>=lmax and xt(t,vxnew)<=lmax){
           double xt1 = xt(t,vxnew);
           double yt1 = yt(t,vynew);
           double at1 = at(t,vynew,vxnew);
           double vt1 = vt(t,v0,sina);
           tupleav = make_tuple(vt1,at1);
           listav.push_back(tupleav);
           if (t==tf or (t>=tf and t<=tf)) {ht = yt1;atf = at1;vtf= vt1;}
           cout << "t= " << t << " xt= " << xt1 << " yt1= " << yt1 << " at1= " << at1 << " vt1= " << vt1 << endl;
           t+=dt;
        }
    }

    cout << "Р·РЅР°С‡РµРЅРёСЏ РїСЂРё t =" << tf << " h= " << ht << " a= " << atf << " v=" << vtf;

    return 0;
}
